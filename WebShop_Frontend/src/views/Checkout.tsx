import React, { useEffect, useState } from 'react';
import defaultProductImage from "../images/products/1.png";
import '../styles/checkout.css';
import { CartItem } from '../components/models/props/cartItem';
import { useCart } from '../components/Cart';

const CartIcon: React.FC = () => (
  <svg
    fill='#fa7646'
    width="100mm"
    height="100mm"
    viewBox="0 0 100 100"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      id="path1"
      style={{
        color: '#000000',
        display: 'inline',
        fillOpacity: 1,
        strokeWidth: 1.2738,
        strokeLinecap: 'round',
        strokeLinejoin: 'round',
        stroke: 'none'
      }}
      d="m 15.215237,7.3240086 c -1.758774,1.082e-4 -3.184516,1.4258501 -3.184625,3.1846244 1.09e-4,1.758775 1.425851,3.184517 3.184625,3.184626 h 8.309118 v 3.184624 c 0.0041,0.262399 0.04054,0.52329 0.108617,0.776738 0.0018,0.02306 0.0037,0.0461 0.006,0.06912 l 7.314499,26.49268 1.384962,6.92613 c 2.17e-4,0.0027 4.36e-4,0.0052 6.59e-4,0.0079 l 0.273833,1.365874 0.739217,5.038921 c 0.02201,0.08439 0.04749,0.167838 0.07635,0.250135 0.01695,0.06287 0.03583,0.125227 0.05661,0.186944 0.09518,0.272404 0.226937,0.530609 0.39166,0.767523 0.03047,0.03935 0.06186,0.07798 0.09413,0.115852 0.161708,0.207682 0.348541,0.394515 0.556223,0.556223 0.03893,0.03343 0.07864,0.06591 0.119138,0.09742 0.236952,0.164493 0.495154,0.29603 0.767522,0.391002 0.06151,0.02055 0.123635,0.03921 0.186286,0.05595 0.278549,0.08444 0.567358,0.130279 0.85836,0.136258 0.0052,8.9e-4 0.01057,0.0018 0.01579,0.0027 h 58.306011 c 1.758851,7.5e-5 3.184699,-1.425774 3.184625,-3.184623 7.5e-5,-1.758851 -1.425774,-3.1847 -3.184625,-3.184625 H 39.08478 l -0.363354,-3.16751 h 56.404318 c 1.432239,1.96e-4 2.688434,-0.955687 3.070089,-2.336138 l 8.426957,-30.51855 c 0.55845,-2.027627 -0.96696,-4.03022 -3.07009,-4.030478 H 29.893604 v -3.184663 c -0.0011,-0.19709 -0.0205,-0.393655 -0.05793,-0.5871609 -0.01511,-0.064594 -0.03223,-0.1286903 -0.05135,-0.1922094 -0.03065,-0.1291132 -0.06934,-0.2561846 -0.115851,-0.3804701 -0.02825,-0.066632 -0.05877,-0.1322697 -0.0915,-0.1968168 C 29.524533,9.0380296 29.465414,8.9272514 29.399903,8.82025 29.357113,8.754089 29.311883,8.689533 29.264302,8.6267234 29.194232,8.5308704 29.118852,8.4390092 29.038522,8.3515733 28.983255,8.2919087 28.92573,8.2343714 28.866063,8.1791116 28.77863,8.098786 28.686767,8.023404 28.590914,7.9533312 28.528103,7.905755 28.463547,7.8605225 28.397388,7.8177319 28.290389,7.7522205 28.179607,7.6931037 28.065629,7.6406615 28.001086,7.6079377 27.935437,7.5774175 27.868811,7.5491647 27.744527,7.5026587 27.617454,7.4639607 27.488341,7.433313 27.424821,7.414206 27.36072,7.397074 27.296131,7.381966 27.102625,7.344529 26.906061,7.325142 26.70897,7.324034 Z M 30.893489,20.06185 H 99.367526 L 92.702718,44.209175 H 37.558952 Z m 12.529173,41.65552 c -3.292804,0 -6.003261,2.710455 -6.003261,6.00326 -10e-7,3.292808 2.710456,6.003261 6.003261,6.003261 3.292806,0 6.003261,-2.710454 6.003261,-6.003261 -10e-7,-3.292805 -2.710456,-6.00326 -6.003261,-6.00326 z m 43.687545,0 c -3.292805,0 -6.00326,2.710455 -6.003261,6.00326 0,3.292808 2.710455,6.003261 6.003261,6.003261 3.292805,0 6.003261,-2.710454 6.003261,-6.003261 -10e-7,-3.292805 -2.710457,-6.00326 -6.003261,-6.00326 z m -43.687545,3.821154 c 1.227579,0 2.182107,0.954528 2.182107,2.182106 0,1.227578 -0.954528,2.181448 -2.182107,2.181448 -1.227578,0 -2.181448,-0.953868 -2.181448,-2.181448 0,-1.227578 0.95387,-2.182106 2.181448,-2.182106 z m 43.687545,0 c 1.227578,0 2.182106,0.954528 2.182106,2.182106 0,1.227578 -0.954528,2.181448 -2.182106,2.181448 -1.227579,0 -2.182107,-0.953868 -2.182107,-2.181448 10e-7,-1.227578 0.954528,-2.182106 2.182107,-2.182106 z"
      transform="translate(-10.972278,12.121885)"
    />
  </svg>
);

const BasketIcon: React.FC = () => (
  <svg
    fill='#fa7646'
    width="64px"
    height="64px"
    viewBox="0 0 512 512"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      style={{
        display: 'inline',
        fillOpacity: 1,
        stroke: 'none',
        strokeWidth: 20.6334,
        strokeLinecap: 'round',
        paintOrder: 'fill markers stroke',
      }}
      d="m 256.00137,60.990508 c -38.97101,-1.337616 -84.31323,25.287923 -84.80411,67.946252 -1.95971,5.5369 4.35295,19.77287 -3.95661,18.62925 -35.8239,-1.40325 -71.898345,-5.18715 -107.631721,-1.64121 -31.799247,7.50935 -48.541846,42.64263 -44.666327,73.28359 1.111537,53.91758 4.0747,107.83517 1.448181,161.75275 -0.09683,26.50028 -2.67771,53.0964 -0.83144,79.52484 4.030513,30.48712 33.421605,55.69974 64.569261,50.95807 62.145316,-1.21636 124.290646,-3.81389 186.435976,-4.14975 60.08807,1.27836 120.18822,3.47876 180.26873,4.17653 34.33319,-3.63614 54.26622,-41.09637 50.26101,-73.06737 -1.10687,-54.35745 -4.12389,-108.71492 -1.48189,-163.07239 0.0967,-26.5005 2.67723,-53.09692 0.83101,-79.5256 -4.02749,-30.3947 -33.42761,-55.88357 -64.56473,-50.81909 -30.35748,1.21923 -60.71493,2.43843 -91.0724,3.65762 0.78919,-20.88159 0.0452,-43.74173 -15.91299,-59.472701 C 307.68315,70.001563 281.33471,60.92974 256.00137,60.990508 Z m 0,34.102999 c 22.4681,-0.559663 53.23037,12.624383 50.70194,39.126513 -0.81552,7.12278 3.85029,19.51113 -7.91851,16.11175 -27.02155,1.6336 -54.03651,1.98433 -81.03829,-0.21373 -8.87979,0.91841 -15.26848,-0.52736 -12.44386,-10.73384 -2.85773,-17.41629 7.79907,-34.12746 24.85499,-39.384987 8.18356,-3.316592 17.02772,-4.901805 25.84373,-4.905706 z M 70.885804,179.73988 c 33.437426,1.34287 66.874836,2.68575 100.312246,4.02862 0,7.96507 0,15.93013 0,23.8952 11.36766,0 22.73534,0 34.103,0 0.98154,-6.92703 -1.90134,-17.87676 1.31974,-22.47252 30.09764,1.64214 60.19527,2.45097 90.2929,0.3401 11.80383,-4.17848 10.24243,5.55571 9.78962,14.13588 -3.89509,11.84386 8.69961,7.19793 15.84979,7.99654 6.66117,-1.62459 21.29804,4.72653 18.25321,-6.60407 1.58441,-6.44303 -4.70055,-20.44571 6.59874,-17.55615 32.95486,-0.92218 65.9421,-3.46012 98.87621,-3.34847 19.77469,4.51157 21.51124,26.48869 19.83908,43.01449 -1.12563,52.59722 -3.9203,105.19446 -1.34564,157.79166 -0.0174,25.10003 2.7105,50.3794 0.74985,75.3549 -3.5827,18.3608 -23.24515,21.94871 -38.93197,19.87097 -60.82494,-1.14494 -121.64986,-3.82705 -182.47479,-3.98335 -57.744,1.44929 -115.48798,2.89859 -173.231986,4.34788 -20.683933,0.13847 -27.75475,-22.48704 -25.105472,-39.46849 1.111557,-53.91732 4.074719,-107.83465 1.448184,-161.75198 0.01727,-25.10031 -2.710877,-50.37992 -0.750289,-75.35571 2.667149,-11.0427 12.663892,-20.41314 24.407577,-20.2355 z m 185.114786,98.48041 c -60.01526,0.93773 -118.94304,15.58028 -175.823309,33.801 0,8.4652 0,16.93039 0,25.39558 76.799929,-24.54323 158.883229,-43.58987 239.525129,-27.91332 38.01762,6.39187 75.48465,15.94876 112.1207,27.91332 0,-8.46519 0,-16.93038 0,-25.39558 -56.92278,-17.8909 -115.86001,-32.77724 -175.82252,-33.801 z m 0,44.92273 c -47.93656,0.72283 -95.00937,12.48757 -140.44065,26.99874 1.22468,8.67829 -5.00552,27.52144 10.20577,16.97434 60.1484,-18.44912 124.46311,-31.44457 187.0869,-17.96244 28.31381,5.11916 56.24793,12.31929 83.58783,21.273 -1.18739,-9.5153 4.98427,-24.45597 -10.38794,-23.59547 -42.25438,-12.46472 -85.76961,-23.08961 -130.05191,-23.68817 z m 0,39.01048 c -39.06803,0.63049 -77.42996,10.11378 -114.45622,22.00362 -0.71088,11.22732 -1.788,22.68731 13.37366,12.28947 51.32154,-15.79319 106.43863,-24.26785 159.31441,-10.79899 17.41283,0.26836 45.66537,17.03766 56.22437,11.07908 5.36541,-17.39368 -14.91163,-16.19503 -26.72489,-20.51337 -28.65383,-7.53137 -57.98812,-13.77496 -87.73133,-14.05981 z"
    />
  </svg>
);

const Webstore: React.FC = () => {
  const { cart, addToCart, removeFromCart } = useCart();
  const [cartItems, setCartItems] = useState<CartItem[]>([]);
  const [isArticlesVisible, setIsArticlesVisible] = useState(true);
  const [isCheckoutVisible, setIsCheckoutVisible] = useState(true);
  const [isSmallScreen, setIsSmallScreen] = useState(false);

  useEffect(() => {
    const storedCartItems = localStorage.getItem('cart');
    if (storedCartItems) {
      setCartItems(JSON.parse(storedCartItems));
    }

    const handleResize = () => {
      setIsSmallScreen(window.innerWidth <= 750);
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const handleIncrement = (itemId: number) => {
    const item = cartItems.find(item => item.id === itemId);
    if (item) {
      addToCart({ ...item, quantity: + 1 });
      setCartItems(cartItems.map(ci => ci.id === itemId ? { ...ci, quantity: ci.quantity + 1 } : ci));
    }
  };

  const handleDecrement = (itemId: number) => {
    const item = cartItems.find(item => item.id === itemId);
    if (item && item.quantity > 1) {
      addToCart({ ...item, quantity: - 1 });
      setCartItems(cartItems.map(ci => ci.id === itemId ? { ...ci, quantity: ci.quantity - 1 } : ci));
    } else {
      handleRemove(itemId);
    }
  };

  const handleRemove = (itemId: number) => {
    removeFromCart(itemId);
    setCartItems(cartItems.filter(item => item.id !== itemId));
  };

  const ArrowIcon = ({ isVisible }: { isVisible: boolean }) => (
    <svg className='arrowIcon' width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path
        d={isVisible ? "M12 8l-6 6h12l-6-6z" : "M12 16l6-6H6l6 6z"}
      />
    </svg>
  );

  return (
    <article id="checkoutForm">
      <div id='checkoutArticles' className={isArticlesVisible ? '' : 'collapsed'}>
        <div 
          onClick={isSmallScreen ? () => setIsArticlesVisible(!isArticlesVisible) : undefined} 
          className="toggleSection"
        >
          <CartIcon />
          <h2>Articles</h2>
          {isSmallScreen && <ArrowIcon isVisible={isArticlesVisible} />}
        </div>
        {isArticlesVisible && (
          <div>
            {cartItems.length > 0 ? (
              cartItems.map((item) => (
                <div key={item.id} className="cart-item">
                  <img 
                    src={item.image || defaultProductImage} 
                    alt={item.name} 
                    className="cart-item-image"
                  />
                  <p>{item.name} - ${item.price} x {item.quantity}</p>
                  <div className="cart-item-buttons">
                    <button onClick={() => handleIncrement(item.id)}>➕</button>
                    <button onClick={() => handleDecrement(item.id)}>➖</button>
                  </div>
                </div>
              ))
            ) : (
              <p>No items in the cart</p>
            )}
          </div>
        )}
      </div>

      <div id='checkoutPayment' className={isCheckoutVisible ? '' : 'collapsed'}>
        <div 
          onClick={isSmallScreen ? () => setIsCheckoutVisible(!isCheckoutVisible) : undefined} 
          className="toggleSection"
        >
          <BasketIcon />
          <h2>Checkout</h2>
          {isSmallScreen && <ArrowIcon isVisible={isCheckoutVisible} />}
        </div>
        {isCheckoutVisible && (
          <>
            <div id="shippingInfo">
              <input type="text" placeholder="Shipping Address" />
              <input type="text" placeholder="City" />
              <input type="text" placeholder="ZIP Code" />
              <input type="text" placeholder="Country" />
            </div>
            <div id="paymentInfo">
              <h2>Payment Information</h2>
              <input type="text" value="1234 5678 9012 3456" readOnly placeholder="Card Number" />
              <input type="text" value="User Name" readOnly placeholder="Name on Card" />
              <input type="month" value="2024-12" readOnly placeholder="Expiry Date" />
              <input type="text" value="123" readOnly placeholder="CVV" />
            </div>
            <div>
              <input type="button" value="Place Order" id="placeOrderButton" />
            </div>
          </>
        )}
      </div>
    </article>
  );
};

export default Webstore;
